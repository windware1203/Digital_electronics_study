// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/21/2022 17:09:41"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    lfsr
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lfsr_vlg_sample_tst(
	clk,
	inSeed,
	sampler_tx
);
input  clk;
input [0:5] inSeed;
output sampler_tx;

reg sample;
time current_time;
always @(clk or inSeed)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module lfsr_vlg_check_tst (
	outt,
	sampler_rx
);
input [0:5] outt;
input sampler_rx;

reg [0:5] outt_expected;

reg [0:5] outt_prev;

reg [0:5] outt_expected_prev;

reg [0:5] last_outt_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	outt_prev = outt;
end

// update expected /o prevs

always @(trigger)
begin
	outt_expected_prev = outt_expected;
end


// expected outt[ 5 ]
initial
begin
	outt_expected[5] = 1'bX;
end 
// expected outt[ 4 ]
initial
begin
	outt_expected[4] = 1'bX;
end 
// expected outt[ 3 ]
initial
begin
	outt_expected[3] = 1'bX;
end 
// expected outt[ 2 ]
initial
begin
	outt_expected[2] = 1'bX;
end 
// expected outt[ 1 ]
initial
begin
	outt_expected[1] = 1'bX;
end 
// expected outt[ 0 ]
initial
begin
	outt_expected[0] = 1'bX;
end 
// generate trigger
always @(outt_expected or outt)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected outt = %b | ",outt_expected_prev);
	$display("| real outt = %b | ",outt_prev);
`endif
	if (
		( outt_expected_prev[0] !== 1'bx ) && ( outt_prev[0] !== outt_expected_prev[0] )
		&& ((outt_expected_prev[0] !== last_outt_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outt[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outt_expected_prev);
		$display ("     Real value = %b", outt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outt_exp[0] = outt_expected_prev[0];
	end
	if (
		( outt_expected_prev[1] !== 1'bx ) && ( outt_prev[1] !== outt_expected_prev[1] )
		&& ((outt_expected_prev[1] !== last_outt_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outt[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outt_expected_prev);
		$display ("     Real value = %b", outt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outt_exp[1] = outt_expected_prev[1];
	end
	if (
		( outt_expected_prev[2] !== 1'bx ) && ( outt_prev[2] !== outt_expected_prev[2] )
		&& ((outt_expected_prev[2] !== last_outt_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outt[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outt_expected_prev);
		$display ("     Real value = %b", outt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outt_exp[2] = outt_expected_prev[2];
	end
	if (
		( outt_expected_prev[3] !== 1'bx ) && ( outt_prev[3] !== outt_expected_prev[3] )
		&& ((outt_expected_prev[3] !== last_outt_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outt[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outt_expected_prev);
		$display ("     Real value = %b", outt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outt_exp[3] = outt_expected_prev[3];
	end
	if (
		( outt_expected_prev[4] !== 1'bx ) && ( outt_prev[4] !== outt_expected_prev[4] )
		&& ((outt_expected_prev[4] !== last_outt_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outt[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outt_expected_prev);
		$display ("     Real value = %b", outt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outt_exp[4] = outt_expected_prev[4];
	end
	if (
		( outt_expected_prev[5] !== 1'bx ) && ( outt_prev[5] !== outt_expected_prev[5] )
		&& ((outt_expected_prev[5] !== last_outt_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outt[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outt_expected_prev);
		$display ("     Real value = %b", outt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outt_exp[5] = outt_expected_prev[5];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module lfsr_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [0:5] inSeed;
// wires                                               
wire [0:5] outt;

wire sampler;                             

// assign statements (if any)                          
lfsr i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.inSeed(inSeed),
	.outt(outt)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 
// inSeed[ 5 ]
always
begin
	inSeed[5] = 1'b0;
	inSeed[5] = #10000 1'b1;
	#10000;
end 
// inSeed[ 4 ]
always
begin
	inSeed[4] = 1'b0;
	inSeed[4] = #20000 1'b1;
	#20000;
end 
// inSeed[ 3 ]
initial
begin
	repeat(12)
	begin
		inSeed[3] = 1'b0;
		inSeed[3] = #40000 1'b1;
		# 40000;
	end
	inSeed[3] = 1'b0;
end 
// inSeed[ 2 ]
initial
begin
	repeat(6)
	begin
		inSeed[2] = 1'b0;
		inSeed[2] = #80000 1'b1;
		# 80000;
	end
	inSeed[2] = 1'b0;
end 
// inSeed[ 1 ]
initial
begin
	repeat(3)
	begin
		inSeed[1] = 1'b0;
		inSeed[1] = #160000 1'b1;
		# 160000;
	end
	inSeed[1] = 1'b0;
end 
// inSeed[ 0 ]
initial
begin
	inSeed[0] = 1'b0;
	inSeed[0] = #320000 1'b1;
	inSeed[0] = #320000 1'b0;
	inSeed[0] = #320000 1'b1;
end 

lfsr_vlg_sample_tst tb_sample (
	.clk(clk),
	.inSeed(inSeed),
	.sampler_tx(sampler)
);

lfsr_vlg_check_tst tb_out(
	.outt(outt),
	.sampler_rx(sampler)
);
endmodule

