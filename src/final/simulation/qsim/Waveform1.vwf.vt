// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/20/2022 22:56:12"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    final
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module final_vlg_sample_tst(
	pin_name1,
	pin_name2,
	pin_name3,
	pin_name4,
	pin_name5,
	pin_name6,
	sampler_tx
);
input  pin_name1;
input  pin_name2;
input  pin_name3;
input  pin_name4;
input  pin_name5;
input  pin_name6;
output sampler_tx;

reg sample;
time current_time;
always @(pin_name1 or pin_name2 or pin_name3 or pin_name4 or pin_name5 or pin_name6)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module final_vlg_check_tst (
	1,
	2,
	3,
	4,
	5,
	6,
	sampler_rx
);
input  1;
input  2;
input  3;
input  4;
input  5;
input  6;
input sampler_rx;

reg  1_expected;
reg  2_expected;
reg  3_expected;
reg  4_expected;
reg  5_expected;
reg  6_expected;

reg  1_prev;
reg  2_prev;
reg  3_prev;
reg  4_prev;
reg  5_prev;
reg  6_prev;

reg  1_expected_prev;
reg  2_expected_prev;
reg  3_expected_prev;
reg  4_expected_prev;
reg  5_expected_prev;
reg  6_expected_prev;

reg  last_1_exp;
reg  last_2_exp;
reg  last_3_exp;
reg  last_4_exp;
reg  last_5_exp;
reg  last_6_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	1_prev = 1;
	2_prev = 2;
	3_prev = 3;
	4_prev = 4;
	5_prev = 5;
	6_prev = 6;
end

// update expected /o prevs

always @(trigger)
begin
	1_expected_prev = 1_expected;
	2_expected_prev = 2_expected;
	3_expected_prev = 3_expected;
	4_expected_prev = 4_expected;
	5_expected_prev = 5_expected;
	6_expected_prev = 6_expected;
end



// expected 1
initial
begin
	1_expected = 1'bX;
end 

// expected 2
initial
begin
	2_expected = 1'bX;
end 

// expected 3
initial
begin
	3_expected = 1'bX;
end 

// expected 4
initial
begin
	4_expected = 1'bX;
end 

// expected 5
initial
begin
	5_expected = 1'bX;
end 

// expected 6
initial
begin
	6_expected = 1'bX;
end 
// generate trigger
always @(1_expected or 1 or 2_expected or 2 or 3_expected or 3 or 4_expected or 4 or 5_expected or 5 or 6_expected or 6)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected 1 = %b | expected 2 = %b | expected 3 = %b | expected 4 = %b | expected 5 = %b | expected 6 = %b | ",1_expected_prev,2_expected_prev,3_expected_prev,4_expected_prev,5_expected_prev,6_expected_prev);
	$display("| real 1 = %b | real 2 = %b | real 3 = %b | real 4 = %b | real 5 = %b | real 6 = %b | ",1_prev,2_prev,3_prev,4_prev,5_prev,6_prev);
`endif
	if (
		( 1_expected_prev !== 1'bx ) && ( 1_prev !== 1_expected_prev )
		&& ((1_expected_prev !== last_1_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port 1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", 1_expected_prev);
		$display ("     Real value = %b", 1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_1_exp = 1_expected_prev;
	end
	if (
		( 2_expected_prev !== 1'bx ) && ( 2_prev !== 2_expected_prev )
		&& ((2_expected_prev !== last_2_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port 2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", 2_expected_prev);
		$display ("     Real value = %b", 2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_2_exp = 2_expected_prev;
	end
	if (
		( 3_expected_prev !== 1'bx ) && ( 3_prev !== 3_expected_prev )
		&& ((3_expected_prev !== last_3_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port 3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", 3_expected_prev);
		$display ("     Real value = %b", 3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_3_exp = 3_expected_prev;
	end
	if (
		( 4_expected_prev !== 1'bx ) && ( 4_prev !== 4_expected_prev )
		&& ((4_expected_prev !== last_4_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port 4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", 4_expected_prev);
		$display ("     Real value = %b", 4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_4_exp = 4_expected_prev;
	end
	if (
		( 5_expected_prev !== 1'bx ) && ( 5_prev !== 5_expected_prev )
		&& ((5_expected_prev !== last_5_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port 5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", 5_expected_prev);
		$display ("     Real value = %b", 5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_5_exp = 5_expected_prev;
	end
	if (
		( 6_expected_prev !== 1'bx ) && ( 6_prev !== 6_expected_prev )
		&& ((6_expected_prev !== last_6_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port 6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", 6_expected_prev);
		$display ("     Real value = %b", 6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_6_exp = 6_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module final_vlg_vec_tst();
// constants                                           
// general purpose registers
reg pin_name1;
reg pin_name2;
reg pin_name3;
reg pin_name4;
reg pin_name5;
reg pin_name6;
// wires                                               
wire 1;
wire 2;
wire 3;
wire 4;
wire 5;
wire 6;

wire sampler;                             

// assign statements (if any)                          
final i1 (
// port map - connection between master ports and signals/registers   
	.\1 (1),
	.\2 (2),
	.\3 (3),
	.\4 (4),
	.\5 (5),
	.\6 (6),
	.pin_name1(pin_name1),
	.pin_name2(pin_name2),
	.pin_name3(pin_name3),
	.pin_name4(pin_name4),
	.pin_name5(pin_name5),
	.pin_name6(pin_name6)
);

// pin_name1
initial
begin
	pin_name1 = 1'b0;
	pin_name1 = #320000 1'b1;
	pin_name1 = #320000 1'b0;
	pin_name1 = #320000 1'b1;
end 

// pin_name2
initial
begin
	repeat(3)
	begin
		pin_name2 = 1'b0;
		pin_name2 = #160000 1'b1;
		# 160000;
	end
	pin_name2 = 1'b0;
end 

// pin_name3
initial
begin
	repeat(6)
	begin
		pin_name3 = 1'b0;
		pin_name3 = #80000 1'b1;
		# 80000;
	end
	pin_name3 = 1'b0;
end 

// pin_name4
initial
begin
	repeat(12)
	begin
		pin_name4 = 1'b0;
		pin_name4 = #40000 1'b1;
		# 40000;
	end
	pin_name4 = 1'b0;
end 

// pin_name5
always
begin
	pin_name5 = 1'b0;
	pin_name5 = #20000 1'b1;
	#20000;
end 

// pin_name6
always
begin
	pin_name6 = 1'b0;
	pin_name6 = #10000 1'b1;
	#10000;
end 

final_vlg_sample_tst tb_sample (
	.pin_name1(pin_name1),
	.pin_name2(pin_name2),
	.pin_name3(pin_name3),
	.pin_name4(pin_name4),
	.pin_name5(pin_name5),
	.pin_name6(pin_name6),
	.sampler_tx(sampler)
);

final_vlg_check_tst tb_out(
	.1(1),
	.2(2),
	.3(3),
	.4(4),
	.5(5),
	.6(6),
	.sampler_rx(sampler)
);
endmodule

