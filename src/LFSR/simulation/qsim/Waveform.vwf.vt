// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/07/2022 21:12:28"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    LFSR
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module LFSR_vlg_sample_tst(
	i_Clk,
	i_Enable,
	i_Seed_Data,
	i_Seed_DV,
	sampler_tx
);
input  i_Clk;
input  i_Enable;
input [4:0] i_Seed_Data;
input  i_Seed_DV;
output sampler_tx;

reg sample;
time current_time;
always @(i_Clk or i_Enable or i_Seed_Data or i_Seed_DV)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module LFSR_vlg_check_tst (
	o_LFSR_Data,
	o_LFSR_Done,
	sampler_rx
);
input [4:0] o_LFSR_Data;
input  o_LFSR_Done;
input sampler_rx;

reg [4:0] o_LFSR_Data_expected;
reg  o_LFSR_Done_expected;

reg [4:0] o_LFSR_Data_prev;
reg  o_LFSR_Done_prev;

reg [4:0] o_LFSR_Data_expected_prev;

reg [4:0] last_o_LFSR_Data_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	o_LFSR_Data_prev = o_LFSR_Data;
	o_LFSR_Done_prev = o_LFSR_Done;
end

// update expected /o prevs

always @(trigger)
begin
	o_LFSR_Data_expected_prev = o_LFSR_Data_expected;
end


// expected o_LFSR_Data[ 4 ]
initial
begin
	o_LFSR_Data_expected[4] = 1'bX;
end 
// expected o_LFSR_Data[ 3 ]
initial
begin
	o_LFSR_Data_expected[3] = 1'bX;
end 
// expected o_LFSR_Data[ 2 ]
initial
begin
	o_LFSR_Data_expected[2] = 1'bX;
end 
// expected o_LFSR_Data[ 1 ]
initial
begin
	o_LFSR_Data_expected[1] = 1'bX;
end 
// expected o_LFSR_Data[ 0 ]
initial
begin
	o_LFSR_Data_expected[0] = 1'bX;
end 
// generate trigger
always @(o_LFSR_Data_expected or o_LFSR_Data or o_LFSR_Done_expected or o_LFSR_Done)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected o_LFSR_Data = %b | expected o_LFSR_Done = %b | ",o_LFSR_Data_expected_prev,o_LFSR_Done_expected_prev);
	$display("| real o_LFSR_Data = %b | real o_LFSR_Done = %b | ",o_LFSR_Data_prev,o_LFSR_Done_prev);
`endif
	if (
		( o_LFSR_Data_expected_prev[0] !== 1'bx ) && ( o_LFSR_Data_prev[0] !== o_LFSR_Data_expected_prev[0] )
		&& ((o_LFSR_Data_expected_prev[0] !== last_o_LFSR_Data_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_LFSR_Data[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_LFSR_Data_expected_prev);
		$display ("     Real value = %b", o_LFSR_Data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_LFSR_Data_exp[0] = o_LFSR_Data_expected_prev[0];
	end
	if (
		( o_LFSR_Data_expected_prev[1] !== 1'bx ) && ( o_LFSR_Data_prev[1] !== o_LFSR_Data_expected_prev[1] )
		&& ((o_LFSR_Data_expected_prev[1] !== last_o_LFSR_Data_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_LFSR_Data[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_LFSR_Data_expected_prev);
		$display ("     Real value = %b", o_LFSR_Data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_LFSR_Data_exp[1] = o_LFSR_Data_expected_prev[1];
	end
	if (
		( o_LFSR_Data_expected_prev[2] !== 1'bx ) && ( o_LFSR_Data_prev[2] !== o_LFSR_Data_expected_prev[2] )
		&& ((o_LFSR_Data_expected_prev[2] !== last_o_LFSR_Data_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_LFSR_Data[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_LFSR_Data_expected_prev);
		$display ("     Real value = %b", o_LFSR_Data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_LFSR_Data_exp[2] = o_LFSR_Data_expected_prev[2];
	end
	if (
		( o_LFSR_Data_expected_prev[3] !== 1'bx ) && ( o_LFSR_Data_prev[3] !== o_LFSR_Data_expected_prev[3] )
		&& ((o_LFSR_Data_expected_prev[3] !== last_o_LFSR_Data_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_LFSR_Data[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_LFSR_Data_expected_prev);
		$display ("     Real value = %b", o_LFSR_Data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_LFSR_Data_exp[3] = o_LFSR_Data_expected_prev[3];
	end
	if (
		( o_LFSR_Data_expected_prev[4] !== 1'bx ) && ( o_LFSR_Data_prev[4] !== o_LFSR_Data_expected_prev[4] )
		&& ((o_LFSR_Data_expected_prev[4] !== last_o_LFSR_Data_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port o_LFSR_Data[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", o_LFSR_Data_expected_prev);
		$display ("     Real value = %b", o_LFSR_Data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_o_LFSR_Data_exp[4] = o_LFSR_Data_expected_prev[4];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module LFSR_vlg_vec_tst();
// constants                                           
// general purpose registers
reg i_Clk;
reg i_Enable;
reg [4:0] i_Seed_Data;
reg i_Seed_DV;
// wires                                               
wire [4:0] o_LFSR_Data;
wire o_LFSR_Done;

wire sampler;                             

// assign statements (if any)                          
LFSR i1 (
// port map - connection between master ports and signals/registers   
	.i_Clk(i_Clk),
	.i_Enable(i_Enable),
	.i_Seed_Data(i_Seed_Data),
	.i_Seed_DV(i_Seed_DV),
	.o_LFSR_Data(o_LFSR_Data),
	.o_LFSR_Done(o_LFSR_Done)
);
// i_Seed_Data[ 4 ]
always
begin
	i_Seed_Data[4] = 1'b0;
	i_Seed_Data[4] = #5000 1'b1;
	#5000;
end 
// i_Seed_Data[ 3 ]
always
begin
	i_Seed_Data[3] = 1'b0;
	i_Seed_Data[3] = #10000 1'b1;
	#10000;
end 
// i_Seed_Data[ 2 ]
always
begin
	i_Seed_Data[2] = 1'b0;
	i_Seed_Data[2] = #20000 1'b1;
	#20000;
end 
// i_Seed_Data[ 1 ]
initial
begin
	repeat(12)
	begin
		i_Seed_Data[1] = 1'b0;
		i_Seed_Data[1] = #40000 1'b1;
		# 40000;
	end
	i_Seed_Data[1] = 1'b0;
end 
// i_Seed_Data[ 0 ]
initial
begin
	repeat(6)
	begin
		i_Seed_Data[0] = 1'b0;
		i_Seed_Data[0] = #80000 1'b1;
		# 80000;
	end
	i_Seed_Data[0] = 1'b0;
end 

// i_Seed_DV
initial
begin
	repeat(3)
	begin
		i_Seed_DV = 1'b0;
		i_Seed_DV = #160000 1'b1;
		# 160000;
	end
	i_Seed_DV = 1'b0;
end 

// i_Enable
initial
begin
	i_Enable = 1'b0;
	i_Enable = #320000 1'b1;
	i_Enable = #320000 1'b0;
	i_Enable = #320000 1'b1;
end 

// i_Clk
always
begin
	i_Clk = 1'b0;
	i_Clk = #2500 1'b1;
	#2500;
end 

LFSR_vlg_sample_tst tb_sample (
	.i_Clk(i_Clk),
	.i_Enable(i_Enable),
	.i_Seed_Data(i_Seed_Data),
	.i_Seed_DV(i_Seed_DV),
	.sampler_tx(sampler)
);

LFSR_vlg_check_tst tb_out(
	.o_LFSR_Data(o_LFSR_Data),
	.o_LFSR_Done(o_LFSR_Done),
	.sampler_rx(sampler)
);
endmodule

